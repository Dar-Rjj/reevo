```python
import pandas as pd
import numpy as np

def heuristics_v2(df, Q=20, N=5, P=20):
    # Calculate Daily Log Return
    df['Log_Return'] = np.log(df['close'] / df['close'].shift(1))
    
    # Calculate Historical Volatility
    df['Historical_Volatility'] = df['Log_Return'].rolling(window=Q).std()
    
    # Calculate Volume Trend
    df['Volume_Trend'] = df['volume'] / df['volume'].shift(1)
    
    # Calculate High-to-Low Range
    df['High_Low_Range'] = df['high'] - df['low']
    
    # Calculate Relative Strength
    df['Relative_Strength'] = (df['close'] - df['low']) / (df['high'] - df['low'])
    
    # Smoothing with Exponential Moving Averages
    df['Short_Term_EMA'] = df['Log_Return'].ewm(span=N, adjust=False).mean()
    df['Long_Term_EMA'] = df['Log_Return'].ewm(span=P, adjust=False).mean()
    
    # Smoothed Momentum
    df['Smoothed_Momentum'] = df['Short_Term_EMA'] - df['Long_Term_EMA']
    
    # Inverse of Historical Volatility
    df['Inv_Historical_Volatility'] = 1 / df['Historical_Volatility']
    
    # Final Alpha Factor
    df['Alpha_Factor'] = (
        df['Relative_Strength'] * 
        df['Volume_Trend'] * 
        df['Smoothed_Momentum'] * 
        df['Inv_Historical_Volatility']
    )
    
    return df['Alpha_Factor'].dropna()
```
