```python
def heuristics_v2(df: pd.DataFrame) -> pd.Series:
    """
    Enhanced heuristic for generating a composite alpha factor using:
    - RSI with adaptive lookback based on volatility regime
    - Momentum with volume confirmation and decay weighting
    - Adaptive volatility normalization to smooth signals across regimes
    - Rank-based scaling with cross-sectional robustness

    Factor Interpretation:
    - Positive values indicate bullish momentum with volume support in low-volatility environments
    - Negative values signal bearish divergence or weak trend quality
    """

    # 1. Adaptive RSI: Adjust window based on volatility regime
    returns = df['close'].pct_change()
    vol_regime = returns.groupby(level=0).rolling(20).std().droplevel(0)
    
    # Use shorter RSI window during high volatility, longer in low volatility
    rsi_window = np.where(vol_regime > vol_regime.groupby(level=0).quantile(0.75), 5, 14)
    
    delta = df['close'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)

    avg_gain = gain.groupby(level=0).apply(
        lambda x: x.rolling(window=14).mean()).droplevel(0)
    avg_loss = loss.groupby(level=0).apply(
        lambda x: x.rolling(window=14).mean()).droplevel(0)

    rs = avg_gain / avg_loss.replace(0, 1e-6)
    rsi = 100 - (100 / (1 + rs))

    # 2. Volume-weighted momentum with exponential decay
    mom_window = 10
    raw_momentum = df['close'] - df['close'].shift(mom_window)
    
    # Exponential decay weights for volume
    weights = np.exp(-np.linspace(0, 1, mom_window))
    volume_weighted = df.groupby(level=0)['volume'].apply(
        lambda x: x.pct_change().fillna(0) * weights[-len(x):]).droplevel(0)

    volume_trend = volume_weighted.groupby(level=0).sum().reindex(df.index)
    volume_confirmed_mom = raw_momentum * (1 + volume_trend.clip(-1, 1))

    # 3. Adaptive volatility adjustment
    vol_window = 20
    rolling_vol = returns.groupby(level=0).rolling(vol_window).std().droplevel(0)
    
    # Normalize volatility by asset-specific median
    med_vol = rolling_vol.groupby(level=0).median()
    norm_vol = rolling_vol / med_vol.reindex(rolling_vol.index)

    # Smooth volatility signal to avoid abrupt regime shifts
    vol_signal = norm_vol.ewm(span=5).mean()

    # 4. Rank-normalize components across universe
    def robust_rank(x):
        return x.groupby(level=1).rank(method='dense', pct=True).clip(0.01, 0.99)

    rsi_rank = robust_rank(rsi)
    mom_rank = robust_rank(volume_confirmed_mom)
    vol_rank = robust_rank(vol_signal)

    # Final factor combining weighted normalized components
    alpha_factor = (
        0.4 * mom_rank +
        0.3 * (1 - rsi_rank) +  # Invert so lower RSI contributes positively when oversold
        0.3 * (1 - vol_rank)    # Prefer low volatility regimes
    )

    return alpha_factor.fillna(0).clip(-3, 3)
```
