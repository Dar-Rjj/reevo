```python
def heuristics_v2(df: pd.DataFrame) -> pd.Series:
    # Calculate the normalized trading volume
    normalized_volume = (df['volume'] - df['volume'].mean()) / df['volume'].std()
    
    # Calculate the price change ratio
    price_change_ratio = (df['close'] - df['open']) / (df['high'] - df['low'] + 1e-7)
    
    # Calculate the amount-weighted average price
    amount_weighted_price = (df['amount'] * (df['high'] + df['low'] + df['close']) / 3) / (df['volume'] + 1e-7)
    
    # Calculate the relative strength index (RSI) for 14 periods
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).fillna(0)
    loss = (-delta.where(delta < 0, 0)).fillna(0)
    avg_gain = gain.rolling(window=14).mean()
    avg_loss = loss.rolling(window=14).mean()
    rs = avg_gain / (avg_loss + 1e-7)
    rsi = 100 - (100 / (1 + rs))
    
    # Calculate the momentum factor
    momentum = df['close'] / df['close'].shift(12) - 1
    
    # Calculate the money flow index (MFI) for 14 periods
    typical_price = (df['high'] + df['low'] + df['close']) / 3
    raw_money_flow = typical_price * df['volume']
    positive_money_flow = raw_money_flow.where(typical_price > typical_price.shift(1), 0)
    negative_money_flow = raw_money_flow.where(typical_price < typical_price.shift(1), 0)
    money_ratio = positive_money_flow.rolling(window=14).sum() / (negative_money_flow.rolling(window=14).sum() + 1e-7)
    mfi = 100 - (100 / (1 + money_ratio))
    
    # Adaptive weights based on the standard deviation of each factor
    std_normalized_volume = normalized_volume.std()
    std_price_change_ratio = price_change_ratio.std()
    std_amount_weighted_price = amount_weighted_price.std()
    std_rsi = rsi.std()
    std_momentum = momentum.std()
    std_mfi = mfi.std()
    
    total_std = std_normalized_volume + std_price_change_ratio + std_amount_weighted_price + std_rsi + std_momentum + std_mfi
    
    weight_normalized_volume = std_normalized_volume / total_std
    weight_price_change_ratio = std_price_change_ratio / total_std
    weight_amount_weighted_price = std_amount_weighted_price / total_std
    weight_rsi = std_rsi / total_std
    weight_momentum = std_momentum / total_std
    weight_mfi = std_mfi / total_std
    
    # Combine the factors into a single alpha factor using adaptive weights
    alpha_factor = (normalized_volume * weight_normalized_volume +
                    price_change_ratio * weight_price_change_ratio +
                    amount_weighted_price * weight_amount_weighted_price +
                    rsi * weight_rsi +
                    momentum * weight_momentum +
                    mfi * weight_mfi)
    
    return alpha_factor
```
