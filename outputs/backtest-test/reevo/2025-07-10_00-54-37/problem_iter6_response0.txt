```python
def heuristics_v2(df: pd.DataFrame) -> pd.Series:
    import pandas as pd
    import numpy as np

    # Calculate the normalized trading volume
    normalized_volume = (df['volume'] - df['volume'].mean()) / df['volume'].std()
    
    # Calculate the price change ratio
    price_change_ratio = (df['close'] - df['open']) / (df['high'] - df['low'] + 1e-7)
    
    # Calculate the amount-weighted average price
    amount_weighted_price = (df['amount'] * (df['high'] + df['low'] + df['close']) / 3) / (df['volume'] + 1e-7)
    
    # Calculate the relative strength index (RSI) for 14 periods
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).fillna(0)
    loss = (-delta.where(delta < 0, 0)).fillna(0)
    avg_gain = gain.rolling(window=14).mean()
    avg_loss = loss.rolling(window=14).mean()
    rs = avg_gain / (avg_loss + 1e-7)
    rsi = 100 - (100 / (1 + rs))
    
    # Calculate the momentum factor with a 20-period lookback
    momentum = df['close'] / df['close'].shift(20) - 1
    
    # Calculate the simple moving average (SMA) and the difference from the close price
    sma_50 = df['close'].rolling(window=50).mean()
    sma_diff = df['close'] - sma_50
    
    # Integrate additional market indicators
    ema_20 = df['close'].ewm(span=20, adjust=False).mean()
    ema_diff = df['close'] - ema_20
    
    # Adaptive weighting based on market regimes
    volatility = df['close'].rolling(window=20).std()
    weight_volatility = 1 / (volatility + 1e-7)
    
    # Non-linear combination of factors
    alpha_factor = (
        (price_change_ratio * normalized_volume) ** 0.5 +
        amount_weighted_price * (1 + np.tanh(momentum)) +
        rsi * (1 + np.tanh(ema_diff)) +
        (momentum * weight_volatility) +
        (sma_diff * (1 + np.tanh(rsi - 50)))
    ) / 5
    
    # Normalize the final alpha factor to ensure it is comparable across different stocks and time periods
    alpha_factor = (alpha_factor - alpha_factor.mean()) / (alpha_factor.std() + 1e-7)
    
    return alpha_factor
```
