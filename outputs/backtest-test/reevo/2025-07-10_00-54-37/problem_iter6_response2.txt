```python
def heuristics_v2(df: pd.DataFrame) -> pd.Series:

    # Calculate the normalized trading volume
    normalized_volume = (df['volume'] - df['volume'].mean()) / df['volume'].std()
    
    # Calculate the price change ratio
    price_change_ratio = (df['close'] - df['open']) / (df['high'] - df['low'] + 1e-7)
    
    # Calculate the amount-weighted average price
    amount_weighted_price = (df['amount'] * (df['high'] + df['low'] + df['close']) / 3) / (df['volume'] + 1e-7)
    
    # Calculate the relative strength index (RSI) for 14 periods
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).fillna(0)
    loss = (-delta.where(delta < 0, 0)).fillna(0)
    avg_gain = gain.rolling(window=14).mean()
    avg_loss = loss.rolling(window=14).mean()
    rs = avg_gain / (avg_loss + 1e-7)
    rsi = 100 - (100 / (1 + rs))
    
    # Calculate the momentum factor with a 20-period lookback
    momentum = df['close'] / df['close'].shift(20) - 1
    
    # Calculate the simple moving average (SMA) and the difference from the close price
    sma_50 = df.groupby(level=0)['close'].transform(lambda x: x.rolling(window=50).mean())
    sma_diff = df['close'] - sma_50
    
    # Combine the factors into a single alpha factor
    alpha_factor = (price_change_ratio + normalized_volume + amount_weighted_price + rsi + momentum + sma_diff) / 6
    
    return alpha_factor
```
