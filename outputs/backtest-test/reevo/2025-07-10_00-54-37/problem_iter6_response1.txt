```python
def heuristics_v2(df: pd.DataFrame) -> pd.Series:
    # Calculate the normalized trading volume
    normalized_volume = (df['volume'] - df['volume'].mean()) / df['volume'].std()
    
    # Calculate the price change ratio
    price_change_ratio = (df['close'] - df['open']) / (df['high'] - df['low'] + 1e-7)
    
    # Calculate the amount-weighted average price
    amount_weighted_price = (df['amount'] * (df['high'] + df['low'] + df['close']) / 3) / (df['volume'] + 1e-7)
    
    # Calculate the Relative Strength Index (RSI) for 14 periods
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).fillna(0)
    loss = (-delta.where(delta < 0, 0)).fillna(0)
    avg_gain = gain.rolling(window=14).mean()
    avg_loss = loss.rolling(window=14).mean()
    rs = avg_gain / (avg_loss + 1e-7)
    rsi = 100 - (100 / (1 + rs))
    
    # Calculate the momentum factor with a 20-period lookback
    momentum = df['close'] / df['close'].shift(20) - 1
    
    # Calculate the Simple Moving Average (SMA) and the difference from the close price
    sma_50 = df['close'].rolling(window=50).mean()
    sma_diff = df['close'] - sma_50
    
    # Calculate the 20-day moving average and standard deviation of the closing price
    ma_20 = df.groupby(level=0)['close'].transform(lambda x: x.rolling(window=20).mean())
    std_20 = df.groupby(level=0)['close'].transform(lambda x: x.rolling(window=20).std())
    
    # Calculate the Z-score for the closing price
    z_score = (df['close'] - ma_20) / std_20
    
    # Adaptive weights based on the Z-score
    adaptive_weight = 1 / (1 + z_score.abs())
    normalized_adaptive_weight = adaptive_weight / adaptive_weight.sum()
    
    # Additional technical indicators
    # Calculate the Bollinger Bands
    upper_band = ma_20 + 2 * std_20
    lower_band = ma_20 - 2 * std_20
    bollinger_pct = (df['close'] - lower_band) / (upper_band - lower_band)
    
    # Calculate the Money Flow Index (MFI) for 14 periods
    typical_price = (df['high'] + df['low'] + df['close']) / 3
    money_flow = typical_price * df['volume']
    positive_money_flow = money_flow.where(typical_price > typical_price.shift(1), 0).fillna(0)
    negative_money_flow = money_flow.where(typical_price < typical_price.shift(1), 0).fillna(0)
    mfi_ratio = positive_money_flow.rolling(window=14).sum() / (negative_money_flow.rolling(window=14).sum() + 1e-7)
    mfi = 100 - (100 / (1 + mfi_ratio))
    
    # Combine the factors into a single alpha factor
    alpha_factor = (
        (price_change_ratio * normalized_volume + 
         amount_weighted_price + 
         rsi + 
         momentum + 
         sma_diff + 
         bollinger_pct + 
         mfi) / 7
    ) * normalized_adaptive_weight
    
    return alpha_factor
```
