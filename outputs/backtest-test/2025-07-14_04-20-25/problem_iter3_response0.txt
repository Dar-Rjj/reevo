```python
import pandas as pd
import numpy as np

def heuristics_v2(df):
    # Calculate Intraday Log Returns
    df['open_to_close_log_return'] = np.log(df['close'] / df['open'])
    df['high_to_low_log_range'] = np.log(df['high'] / df['low'])
    
    # Compute Volume-Weighted Intraday Momentum
    total_volume = df['volume'].sum()
    df['volume_ratio'] = df['volume'] / total_volume
    
    df['weighted_open_to_close_log_return'] = df['open_to_close_log_return'] * df['volume_ratio']
    df['weighted_high_to_low_log_range'] = df['high_to_low_log_range'] * df['volume_ratio']
    
    df['weighted_sum_log_returns'] = df['weighted_open_to_close_log_return'] + df['weighted_high_to_low_log_range']
    
    # Apply Smoothing and Trend Indicator
    df['ema_weighted_log_returns'] = df['weighted_sum_log_returns'].ewm(span=12, adjust=False).mean()
    df['ema_volume'] = df['volume'].ewm(span=12, adjust=False).mean()
    
    df['macd_fast_ema'] = df['ema_weighted_log_returns'].ewm(span=12, adjust=False).mean()
    df['macd_slow_ema'] = df['ema_weighted_log_returns'].ewm(span=26, adjust=False).mean()
    df['macd_line'] = df['macd_fast_ema'] - df['macd_slow_ema']
    
    # Incorporate Volatility Adjustment
    df['std_log_returns'] = df['open_to_close_log_return'].rolling(window=12).std()
    df['volatility_adjusted_weighted_sum'] = df['weighted_sum_log_returns'] / df['std_log_returns']
    
    # Final Alpha Factor
    df['alpha_factor'] = df['volatility_adjusted_weighted_sum'] * df['macd_line']
    
    return df['alpha_factor']
```
