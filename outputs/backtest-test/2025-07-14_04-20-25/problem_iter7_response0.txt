```python
import pandas as pd
import numpy as np

def heuristics_v2(df):
    # Calculate Intraday Log Returns
    df['log_return_open_to_close'] = np.log(df['close'] / df['open'])
    df['log_return_high_to_low'] = np.log(df['high'] / df['low'])

    # Compute Volume-Weighted Intraday Momentum
    total_volume = df['volume'].sum()
    total_amount = df['amount'].sum()
    
    df['volume_weight'] = df['volume'] / total_volume
    df['amount_weight'] = df['amount'] / total_amount
    
    df['weighted_log_returns'] = (df['log_return_open_to_close'] + df['log_return_high_to_low']) * (df['volume_weight'] + df['amount_weight'])

    # Apply Smoothing and Trend Indicator
    ema_weighted_log_returns = df['weighted_log_returns'].ewm(span=10, adjust=False).mean()
    ema_volume = df['volume'].ewm(span=10, adjust=False).mean()
    ema_amount = df['amount'].ewm(span=10, adjust=False).mean()
    
    fast_ema = df['weighted_log_returns'].ewm(span=12, adjust=False).mean()
    slow_ema = df['weighted_log_returns'].ewm(span=26, adjust=False).mean()
    
    macd = fast_ema - slow_ema

    # Incorporate Volatility Adjustment
    std_log_returns = df['log_return_open_to_close'].rolling(window=20).std()
    volatility_adjusted_momentum = df['weighted_log_returns'] / std_log_returns

    # Final Alpha Factor
    alpha_factor = (volatility_adjusted_momentum + macd) * (ema_volume + ema_amount)

    return alpha_factor
```
