[*] Running ...
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
/home/rjj/reevo/problems/backtest/gpt.py:13: FutureWarning: Series.__setitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To set a value by position, use `ser.iloc[pos] = value`
  tr[0] = df.loc[df.index[0], 'high'] - df.loc[df.index[0], 'low']
[*] Average:
0.06880271754162087
