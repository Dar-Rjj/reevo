import pandas as pd

def heuristics_v2(df):
    # Chaikin Money Flow (CMF)
    money_flow_multiplier = ((df['close'] - df['low']) - (df['high'] - df['close'])) / (df['high'] - df['low'])
    money_flow_volume = money_flow_multiplier * df['volume']
    cmf = money_flow_volume.rolling(window=20).sum() / df['volume'].rolling(window=20).sum()

    # Average Directional Index (ADX)
    high_low = df['high'] - df['low']
    high_close_prev = df['high'] - df['close'].shift(1)
    low_close_prev = df['low'] - df['close'].shift(1)
    tr = pd.DataFrame({'tr1': high_low, 'tr2': high_close_prev, 'tr3': low_close_prev}).max(axis=1)
    atr = tr.rolling(window=14).mean()
    
    plus_dm = df['high'].diff()
    minus_dm = df['low'].diff()
    plus_dm[plus_dm < 0] = 0
    minus_dm[minus_dm > 0] = 0
    
    plus_di = 100 * (plus_dm.rolling(window=14).sum() / atr)
    minus_di = abs(100 * (minus_dm.rolling(window=14).sum() / atr))
    
    dx = (abs(plus_di - minus_di) / (plus_di + minus_di)) * 100
    adx = dx.rolling(window=14).mean()

    # Composite Heuristic Factor
    heuristics_matrix = (cmf + adx) / 2
    return heuristics_matrix
