import pandas as pd
import numpy as np

def heuristics_v2(df):
    def calculate_price_to_volume_ratio(row):
        return row['close'] / row['volume']

    def calculate_ema(sub_df, window):
        return sub_df['close'].ewm(span=window, adjust=False).mean()

    def calculate_mean_reversion_score(sub_df):
        rolling_mean = sub_df['close'].rolling(window=50).mean()
        rolling_std = sub_df['close'].rolling(window=50).std()
        return (sub_df['close'] - rolling_mean) / rolling_std

    # Calculate price-to-volume ratio
    df['price_to_volume'] = df.apply(calculate_price_to_volume_ratio, axis=1)

    # Group by ticker to calculate 50-day EMA
    grouped = df.groupby(level='ticker')
    df['ema_50'] = grouped['close'].apply(calculate_ema, window=50).reset_index(level=0, drop=True)

    # Adjust the price-to-volume ratio by the EMA
    df['adjusted_pvr'] = df['price_to_volume'] * df['ema_50']

    # Calculate mean reversion score
    df['mean_reversion_score'] = grouped['close'].apply(calculate_mean_reversion_score).reset_index(level=0, drop=True)

    # Combine indicators into a single heuristic score
    df['heuristic_score'] = df['adjusted_pvr'] * (1 - df['mean_reversion_score'])

    # Return the heuristic scores as a Series
    heuristics_matrix = df['heuristic_score']
    return heuristics_matrix
