[*] Running ...
Traceback (most recent call last):
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/pandas/core/groupby/groupby.py", line 1825, in apply
    result = self._python_apply_general(f, self._selected_obj)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/pandas/core/groupby/groupby.py", line 1886, in _python_apply_general
    values, mutated = self._grouper.apply_groupwise(f, data, self.axis)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/pandas/core/groupby/ops.py", line 919, in apply_groupwise
    res = f(group)
          ^^^^^^^^
  File "/home/rjj/reevo/problems/backtest/eval.py", line 21, in <lambda>
    market_data['factor'] = market_data.groupby('stock_code').apply(lambda x: heuristics(x)).reset_index(level=0, drop=True)
                                                                              ^^^^^^^^^^^^^
  File "/home/rjj/reevo/problems/backtest/gpt.py", line 20, in heuristics_v2
    principal_components = pca.fit_transform(features_df)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/sklearn/utils/_set_output.py", line 316, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/sklearn/base.py", line 1363, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/sklearn/decomposition/_pca.py", line 466, in fit_transform
    U, S, _, X, x_is_centered, xp = self._fit(X)
                                    ^^^^^^^^^^^^
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/sklearn/decomposition/_pca.py", line 503, in _fit
    X = validate_data(
        ^^^^^^^^^^^^^^
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/sklearn/utils/validation.py", line 2929, in validate_data
    _check_feature_names(_estimator, X, reset=reset)
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/sklearn/utils/validation.py", line 2725, in _check_feature_names
    feature_names_in = _get_feature_names(X)
                       ^^^^^^^^^^^^^^^^^^^^^
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/sklearn/utils/validation.py", line 2427, in _get_feature_names
    raise TypeError(
TypeError: Feature names are only supported if all input features have string names, but your input has ['int', 'str'] as feature name / column name types. If you want feature names to be stored and validated, you must convert them all to strings, by using X.columns = X.columns.astype(str) for example. Otherwise you can remove feature / column names from your input data, or convert them all to a non-string data type.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/rjj/reevo/problems/backtest/eval.py", line 60, in <module>
    mean_ic = solve(market_data)
              ^^^^^^^^^^^^^^^^^^
  File "/home/rjj/reevo/problems/backtest/eval.py", line 21, in solve
    market_data['factor'] = market_data.groupby('stock_code').apply(lambda x: heuristics(x)).reset_index(level=0, drop=True)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/pandas/core/groupby/groupby.py", line 1847, in apply
    return self._python_apply_general(f, self._obj_with_exclusions)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/pandas/core/groupby/groupby.py", line 1886, in _python_apply_general
    values, mutated = self._grouper.apply_groupwise(f, data, self.axis)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/pandas/core/groupby/ops.py", line 919, in apply_groupwise
    res = f(group)
          ^^^^^^^^
  File "/home/rjj/reevo/problems/backtest/eval.py", line 21, in <lambda>
    market_data['factor'] = market_data.groupby('stock_code').apply(lambda x: heuristics(x)).reset_index(level=0, drop=True)
                                                                              ^^^^^^^^^^^^^
  File "/home/rjj/reevo/problems/backtest/gpt.py", line 20, in heuristics_v2
    principal_components = pca.fit_transform(features_df)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/sklearn/utils/_set_output.py", line 316, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/sklearn/base.py", line 1363, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/sklearn/decomposition/_pca.py", line 466, in fit_transform
    U, S, _, X, x_is_centered, xp = self._fit(X)
                                    ^^^^^^^^^^^^
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/sklearn/decomposition/_pca.py", line 503, in _fit
    X = validate_data(
        ^^^^^^^^^^^^^^
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/sklearn/utils/validation.py", line 2929, in validate_data
    _check_feature_names(_estimator, X, reset=reset)
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/sklearn/utils/validation.py", line 2725, in _check_feature_names
    feature_names_in = _get_feature_names(X)
                       ^^^^^^^^^^^^^^^^^^^^^
  File "/home/rjj/miniconda3/envs/ReEvo/lib/python3.11/site-packages/sklearn/utils/validation.py", line 2427, in _get_feature_names
    raise TypeError(
TypeError: Feature names are only supported if all input features have string names, but your input has ['int', 'str'] as feature name / column name types. If you want feature names to be stored and validated, you must convert them all to strings, by using X.columns = X.columns.astype(str) for example. Otherwise you can remove feature / column names from your input data, or convert them all to a non-string data type.
