import pandas as pd

def heuristics_v2(df):
    # Calculate the Relative Strength Index (RSI)
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).fillna(0)
    loss = (-delta.where(delta < 0, 0)).fillna(0)
    
    avg_gain = gain.rolling(window=14).mean()
    avg_loss = loss.rolling(window=14).mean()
    
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    
    # Calculate the Directional Movement Index (DMI)
    up_move = df['high'] - df['high'].shift(1)
    down_move = df['low'].shift(1) - df['low']
    
    plus_dm = up_move.where((up_move > down_move) & (up_move > 0), 0).fillna(0)
    minus_dm = down_move.where((down_move > up_move) & (down_move > 0), 0).fillna(0)
    
    tr = pd.concat([df['high'] - df['low'], (df['high'] - df['close'].shift()).abs(), (df['low'] - df['close'].shift()).abs()], axis=1).max(axis=1)
    atr = tr.rolling(window=14).mean()
    
    plus_di = 100 * (plus_dm.rolling(window=14).sum() / atr)
    minus_di = 100 * (minus_dm.rolling(window=14).sum() / atr)
    
    dmi = plus_di - minus_di
    
    # Calculate the Price Oscillator
    short_ema = df['close'].ewm(span=12, adjust=False).mean()
    long_ema = df['close'].ewm(span=26, adjust=False).mean()
    price_oscillator = short_ema - long_ema
    
    # Normalize the indicators
    rsi_normalized = (rsi - 50) / 50
    dmi_normalized = dmi / 100
    po_normalized = (price_oscillator - price_oscillator.mean()) / price_oscillator.std()
    
    # Combine the normalized indicators into a single heuristic score
    heuristics_matrix = (rsi_normalized + dmi_normalized + po_normalized).fillna(0)
    
    return heuristics_matrix
