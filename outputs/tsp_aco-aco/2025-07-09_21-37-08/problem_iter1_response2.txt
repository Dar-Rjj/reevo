```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Avoid division by zero
    eps = 1e-8
    dist_inv = 1.0 / (distance_matrix + eps)

    # Compute row and column averages to find globally "important" nodes
    row_means = np.mean(dist_inv, axis=1, keepdims=True)
    col_means = np.mean(dist_inv, axis=0, keepdims=True)

    # Heuristic combines inverse distance with deviation from average node connectivity
    combined_score = dist_inv * (1 + 0.5 * (dist_inv.mean() - dist_inv.std()))

    # Sparsify the matrix: zero out entries that are below threshold of promise
    threshold = np.percentile(combined_score, 30)  # Zero out bottom 30% of scores
    combined_score[combined_score < threshold] = 0

    return combined_score
```
