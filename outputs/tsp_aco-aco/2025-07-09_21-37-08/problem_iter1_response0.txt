```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Avoid division by zero
    eps = 1e-8
    distance_matrix += eps

    # Inverse distance as a base heuristic (shorter edges are more promising)
    inv_dist = 1 / distance_matrix

    # Normalize each row to emphasize relative differences in distances
    row_sums = inv_dist.sum(axis=1, keepdims=True)
    normalized_inv_dist = inv_dist / (row_sums + eps)

    # Create a sparsity factor: penalize edges that are longer than the median of their row
    median_distances = np.median(distance_matrix, axis=1, keepdims=True)
    sparsity_mask = (distance_matrix <= median_distances).astype(float)
    sparsity_factor = 0.5 * sparsity_mask + 0.5  # blend to avoid total suppression

    # Combine heuristics: weighted product of inverse distance and sparsity
    combined = normalized_inv_dist * sparsity_factor

    # Zero out diagonal (no self-loops)
    np.fill_diagonal(combined, 0)

    return combined
```
