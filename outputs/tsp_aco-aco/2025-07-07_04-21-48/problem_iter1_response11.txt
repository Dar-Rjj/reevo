```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Avoid division by zero
    eps = 1e-8
    dist_safe = distance_matrix + eps

    # Inverse distance as base heuristic (favor shorter edges)
    inv_dist = 1.0 / dist_safe

    # Penalize edges connected to nodes with high degree of already short edges
    row_sums = inv_dist.sum(axis=1, keepdims=True)
    col_sums = inv_dist.sum(axis=0, keepdims=True)
    connectivity_pressure = inv_dist / (row_sums + col_sums + eps)

    # Sparsify: suppress small values to zero (discard weakly promising edges)
    threshold = np.percentile(connectivity_pressure[connectivity_pressure > 0], 30)  # 30th percentile
    sparse_heuristic = np.where(connectivity_pressure >= threshold, connectivity_pressure, 0)

    return sparse_heuristic
```
