```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Avoid division by zero and very small distances (add small epsilon)
    eps = 1e-8
    distance_matrix = np.where(distance_matrix == 0, eps, distance_matrix)

    # Inverse of distance as the basic heuristic (favor shorter edges)
    inv_distance = 1.0 / distance_matrix

    # Penalize edges that connect to nodes with high degree (heuristic for balanced graph)
    n = distance_matrix.shape[0]
    node_degree_penalty = np.zeros((n, n))
    degree_threshold = 2  # Threshold on how many edges per node are allowed before penalization

    # Estimate a simple degree count based on k-nearest neighbors (k = degree_threshold + 1)
    k = degree_threshold + 1
    knn_mask = np.zeros_like(distance_matrix, dtype=bool)
    for i in range(n):
        nearest = np.argsort(distance_matrix[i])[:k]
        knn_mask[i, nearest] = True
    edge_degree_support = np.sum(knn_mask, axis=0)

    # Build a rough penalty factor inversely related to neighbor support
    degree_penalty = 1.0 / (edge_degree_support + eps)

    # Combine inverse distance with degree-based penalty
    combined_heuristic = inv_distance * degree_penalty

    # Sparsify: Set low-value edges (less promising) to zero to reduce search space
    threshold = np.percentile(combined_heuristic[np.triu_indices(n, k=1)], 75)
    combined_heuristic[combined_heuristic < threshold] = 0.0

    return combined_heuristic
```
