```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Avoid division by zero
    epsilon = 1e-8
    n = distance_matrix.shape[0]
    
    # Inverse distance heuristic (higher is better)
    inv_distance = 1 / (distance_matrix + epsilon)

    # Normalize each row to emphasize local comparisons
    row_sums = inv_distance.sum(axis=1, keepdims=True)
    normalized_inv_distance = inv_distance / (row_sums + epsilon)

    # Degree penalty: discourage nodes from connecting to already high-degree nodes
    # Approximate expected degree threshold (assumes TSP solution has nearly constant degree)
    avg_degree = 2.0  # Each node appears in exactly two edges in a cycle
    degree_penalty = np.ones((n, n))
    
    for i in range(n):
        for j in range(n):
            if i != j:
                deg_i = np.count_nonzero(normalized_inv_distance[i] > 0)
                deg_j = np.count_nonzero(normalized_inv_distance[j] > 0)
                penalty = 1.0 / ((abs(deg_i - avg_degree) + abs(deg_j - avg_degree)) + 1)
                degree_penalty[i, j] = penalty

    # Combine metrics
    combined = normalized_inv_distance * degree_penalty

    # Sparsify: Set values below a threshold to zero (discourage unlikely edges)
    threshold = np.percentile(combined[combined > 0], 30)  # Keep top 70% connections
    sparse_combined = np.where(combined >= threshold, combined, 0)

    return sparse_combined
```
