```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Avoid division by zero
    eps = 1e-8
    distance_matrix += eps
    
    # Inverse distance as base heuristic (better edges have higher value)
    inv_dist = 1 / distance_matrix

    # Normalize row-wise to prioritize locally better edges
    row_sums = inv_dist.sum(axis=1, keepdims=True)
    normalized = inv_dist / row_sums

    # Penalize edges that are significantly longer than the average in the matrix
    avg_dist = np.mean(distance_matrix)
    penalty_mask = distance_matrix > 2 * avg_dist  # Threshold for long edges
    normalized[penalty_mask] *= 0.2  # Reduce their priority

    # Sparsify: Zero out elements below a threshold to focus search
    threshold = 0.05 * normalized.max()
    sparse_normalized = np.where(normalized < threshold, 0, normalized)

    return sparse_normalized
```
