```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Avoid division by zero
    eps = 1e-8
    distance_matrix += eps
    
    # Inverse of distance to emphasize shorter edges
    inv_dist = 1.0 / distance_matrix
    
    # Compute node degrees of nearest neighbors to penalize high-degree nodes
    k = 5  # consider top-k nearest neighbors for local density estimation
    n = distance_matrix.shape[0]
    local_connectivity = np.zeros_like(distance_matrix)
    
    for i in range(n):
        nearest_k = np.argsort(distance_matrix[i])[:k+1]  # +1 to exclude self
        local_connectivity[i, nearest_k] = 1.0
        local_connectivity[nearest_k, i] = 1.0  # make symmetric

    # Sparsify with thresholding based on median distance
    sparse_mask = (distance_matrix > np.median(distance_matrix)) * 0.1
    sparse_mask += (distance_matrix <= np.median(distance_matrix)) * 1.0
    
    # Combine factors: inverse distance, local connectivity, and sparsity control
    combined_score = inv_dist * (1.0 + local_connectivity) * sparse_mask

    # Zero out diagonal (no self-loops)
    np.fill_diagonal(combined_score, 0)

    return combined_score
```
