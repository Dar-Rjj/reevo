```python
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Avoid division by zero by adding a small epsilon to the distance matrix
    epsilon = 1e-8
    safe_distance = distance_matrix + epsilon

    # Inverse distance heuristic (higher is better)
    inv_dist = 1 / safe_distance

    # Compute average distance for each node to penalize edges that connect to nodes with generally long distances
    row_avg = np.mean(safe_distance, axis=1, keepdims=True)
    col_avg = np.mean(safe_distance, axis=0, keepdims=True)

    # Combine both factors: reward short distances, penalize connections to "bad" nodes
    combined_heuristic = inv_dist * np.minimum(row_avg, col_avg)

    # Sparsify the heuristic matrix by zeroing out values below a percentile threshold (e.g., 30th percentile)
    threshold = np.percentile(combined_heuristic[np.triu_indices_from(combined_heuristic, k=1)], 30)
    combined_heuristic[combined_heuristic < threshold] = 0

    return combined_heuristic
```
