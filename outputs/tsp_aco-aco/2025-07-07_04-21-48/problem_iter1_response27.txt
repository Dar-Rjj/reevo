```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    # Avoid division by zero
    eps = 1e-8
    distance_matrix += eps
    
    # Inverse distance as base heuristic (favor shorter edges)
    inv_dist = 1 / distance_matrix
    
    # Compute degree of centrality based on row-wise and column-wise sums
    row_sums = np.sum(distance_matrix, axis=1, keepdims=True)
    col_sums = np.sum(distance_matrix, axis=0, keepdims=True)
    centrality = 1 / (row_sums + col_sums + eps)
    
    # Outer product to get edge-centric centrality-like score
    centrality_scores = np.dot(centrality, centrality.T)
    
    # Combine inverse distance with centrality scores
    combined = inv_dist * centrality_scores
    
    # Apply thresholding: zero out entries that are below a percentile threshold
    threshold = np.percentile(combined[np.triu_indices_from(combined, k=1)], 30)
    combined[combined < threshold] = 0.0
    
    return combined
```
